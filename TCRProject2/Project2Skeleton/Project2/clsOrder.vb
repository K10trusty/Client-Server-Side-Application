Public Class clsOrder
    'A comment for this class goes here.
    'The comment should describe the purpose of 
    'the class and anthing else that is relevant 
    'for future development.

    Private sID As String                       'Hold Order ID
    Private sCustomerName As String             'Hold Customer Name
    Private aPhone As String                    'Hold Phone #
    Private aDate As String                     'Hold Date
    Private detailsList As ArrayList            'Hold the detail line items as an Arraylist
    Private sError As String                    'Hold any errors generated by this class
    Private aDelivery As String                 'Hold the delivery price
    Private bStreet As String                   'Hold the billing Street
    Private bCity As String         'Hold the billing city
    Private bState As String        'Hold the billing state
    Private bZip As String          'Hold the billing zip
    Private sStreet As String       'Holds the Shippiing street
    Private sCity As String     'Hold the shipping city
    Private sState As String    'Hold the shipping state
    Private aCount As Integer   'Hold our count of how many line items
    Private sZip As String      'Hold the shipping zip

    Public Sub New()
        'Set our initial values
        sID = ""
        sCustomerName = ""
        aPhone = ""
        aDate = ""
        sError = ""
        bStreet = ""
        bCity = ""
        bState = ""
        bZip = ""
        detailsList = New ArrayList
        sStreet = ""
        sCity = ""
        sZip = ""
        sState = ""
    End Sub

    '===================================================
    ' Object properties setters / getters
    '===================================================

    Public Property ID()
        'get and set the order id
        Get
            Return sID
        End Get
        Set(ByVal value)

            'Validation at class level
            If isValidID(value) = True Then
                sID = Convert.ToInt32(value)
            End If
        End Set
    End Property

    Public Property CustomerName()
        'Get and set the customer name
        Get
            Return sCustomerName
        End Get
        Set(ByVal value)
            'Validate, you can also add a try/catch
            If isValidName(value) Then
                sCustomerName = value
            End If
        End Set
    End Property

    Public Property Phone()
        'Get and set Phone
        Get
            Return aPhone
        End Get
        Set(ByVal value)
            'Validated down below matey
            If isValidPhone(value) Then
                aPhone = value
            End If

        End Set
    End Property


    Public Property WorkingDate()
        'Get and set Date
        Get
            Return aDate
        End Get
        Set(ByVal value)
            'Validated Date
            If isValidDate(value) Then
                aDate = value
            End If

        End Set
    End Property

    Public Property Delivery()
        'Get and set Delivery
        Get
            Return aDelivery
        End Get
        Set(value)
            'get and set the order id

            If isValidDelivery(value) = True Then
                aDelivery = value
            End If
        End Set
    End Property

    Public Property BillStreet()
        'Get and set Delivery
        Get
            Return bStreet
        End Get
        Set(value)
            'get and set the order id

            If isValidBillStreet(value) = True Then
                bStreet = value
            End If
        End Set
    End Property

    Public Property BillCity()
        'Get and set Delivery
        Get
            Return bCity
        End Get
        Set(value)
            'get and set the order id

            If isValidBillCity(value) = True Then
                bCity = value
            End If
        End Set
    End Property

    Public Property BillState()
        'Get and set Delivery
        Get
            Return bState
        End Get
        Set(value)
            'get and set the order id

            If isValidBillState(value) = True Then
                bState = value
            End If
        End Set
    End Property

    Public Property BillZip()
        'Get and set Delivery
        Get
            Return bZip
        End Get
        Set(value)
            'get and set the order id

            If isValidBillZip(value) = True Then
                bZip = value
            End If
        End Set
    End Property

    Public Property ShipStreet()
        'Get and set Delivery
        Get
            Return sStreet
        End Get
        Set(value)
            'get and set the order id

            If isValidShipStreet(value) = True Then
                sStreet = value
            End If
        End Set
    End Property

    Public Property ShipCity()
        'Get and set Delivery
        Get
            Return sCity
        End Get
        Set(value)
            'get and set the order id

            If isValidShipCity(value) = True Then
                sCity = value
            End If
        End Set
    End Property

    Public Property ShipState()
        'Get and set Delivery
        Get
            Return sState
        End Get
        Set(value)
            'get and set the order id

            If isValidShipState(value) = True Then
                sState = value
            End If
        End Set
    End Property

    Public Property ShipZip()
        'Get and set Delivery
        Get
            Return sZip
        End Get
        Set(value)
            'get and set the order id

            If isValidShipZip(value) = True Then
                sZip = value
            End If
        End Set
    End Property

    Public Property ListCount()
        'Get and set Delivery
        Get
            Return aCount
        End Get
        Set(value)
            'get and set the order id

            aCount = value
        End Set
    End Property


    '===================================================
    ' Helper routines
    '===================================================

    Public Sub AddDetail(ByVal aDetailsList As ArrayList)

        'Loop through all our arraylist of details
        For i As Integer = 0 To aDetailsList.Count - 1
            'get a single order detail line out of 
            'the ArrayList of orders details
            Dim arrItem As String() = aDetailsList(i)

            'create a new order detail object
            Dim myOrderDetail As New clsOrderDetail

            'Add detail info to our object
            ' 0 - detail line
            ' 1 - Item Description
            ' 2 - Item Quantity
            ' 3 - Item Price

            myOrderDetail.line = arrItem(0)
            myOrderDetail.Item = arrItem(1)
            myOrderDetail.Qty = arrItem(2)
            myOrderDetail.Price = arrItem(3)
            If myOrderDetail.getError = "" Then
                myOrderDetail.total()   '4
                myOrderDetail.taxes()   '5
                myOrderDetail.grandTotal() '6
            End If

            'Add the order to our collection
            'Check for errors in the detail
            'if no errors then add
            If myOrderDetail.getError = "" Then
                detailsList.Add(myOrderDetail)
            Else
                addError(myOrderDetail.getError)
            End If
        Next

        If detailsList.Count = 0 Then
            addError("Detail:Order must contain at least one valid detail line")
        End If

    End Sub

    Public Function getLineTotal(ByVal iLine As Integer) As Decimal

        'return the line total
        'Loop through all the order lines
        For i As Integer = 0 To detailsList.Count - 1

            Dim myOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            If myOrderDetail.line = iLine Then

                'Returning to customer total of item + taxes
                Return myOrderDetail.total + myOrderDetail.taxes
            End If
        Next
    End Function

    Public Function getTotal() As Decimal
        'return the total for the order
        Dim aTotal As Decimal
        For i As Integer = 0 To detailsList.Count - 1
            Dim anOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            aTotal += anOrderDetail.total
        Next

        Return aTotal
    End Function


    Public Function getTaxes() As Decimal
        'returns the tax total for the order
        Dim aTotal As Decimal
        For i As Integer = 0 To detailsList.Count - 1
            Dim anOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            aTotal += anOrderDetail.taxes

        Next

        Return aTotal
    End Function

    Public Function getGrandTotal() As Decimal
        'return the total and the taxes for the order
        Dim aTotal As Decimal
        For i As Integer = 0 To detailsList.Count - 1
            Dim anOrderDetail As clsOrderDetail = CType(detailsList(i), clsOrderDetail)
            aTotal += anOrderDetail.grandTotal
        Next

        Return aTotal
    End Function


    Private Sub addError(ByVal s As String)
        'private function to format our error message by
        'adding line breaks when necessary
        If sError = "" Then
            sError = s
        Else
            sError += vbCrLf & s
        End If
    End Sub

    '===================================================
    ' Public functions to access the detail lines
    ' and the error
    '===================================================

    Public Function GetDetail() As ArrayList
        'Retrieve a detail item from the order
        Dim detailItemsList As New ArrayList
        For i As Integer = 0 To detailsList.Count - 1
            Dim orderDetail As New clsOrderDetail
            orderDetail = detailsList.Item(i)

            Dim arrDetail(4) As String

            arrDetail(0) = orderDetail.line
            arrDetail(1) = orderDetail.Item
            arrDetail(2) = orderDetail.Qty
            arrDetail(3) = orderDetail.Price
            arrDetail(4) = orderDetail.grandTotal

            detailItemsList.Add(arrDetail)
        Next
        Return detailItemsList
    End Function

    Public Function getError()
        'public Function to return the error 
        'To other objects
        Return sError
    End Function

    '===================================================
    ' Validation routines
    '===================================================

    Private Function isValidID(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try

            If s <> "" AndAlso s Mod 100 = 0 AndAlso s > 0 Then
                bResult = True
            Else
                addError("ID: Cannot be left blank and Must be a value of 100")
                bResult = False
            End If
        Catch ex As Exception
            addError("ID: Invalid ID (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidName(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Name: Invalid Customer Name")
                bResult = False
            End If
        Catch ex As Exception
            addError("Name: Invalid Customer Name (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidPhone(ByVal s As String)
        Dim bResult As Boolean
        Dim phoneTest As UInt64
        Try
            If s <> "" AndAlso Len(s) = 10 AndAlso UInt64.TryParse(s, phoneTest) = True Then
                bResult = True
            Else
                addError("Phone: Invalid Phone Number")
                bResult = False
            End If
        Catch ex As Exception
            addError("Phone: Invalid Phone Number (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidDate(ByVal s As String)
        Dim bResult As Boolean
        Dim dateTest As Date
        Try
            If s <> "" AndAlso Date.TryParse(s, dateTest) = True Then
                bResult = True
            Else
                addError("Date: Invalid Date")
                bResult = False
            End If
        Catch ex As Exception
            addError("Date: Invalid Date (" & ex.Message & ")")
        End Try

        Return bResult
    End Function

    Private Function isValidDelivery(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Delivery: Please Select an Option")
                bResult = False
            End If
        Catch ex As Exception
            addError("Delivery: CHOOSE AN OPTION (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidBillCity(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Billing: Enter a City")
                bResult = False
            End If
        Catch ex As Exception
            addError("Billing: (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidBillStreet(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Billing: Enter a Street")
                bResult = False
            End If
        Catch ex As Exception
            addError("Billing: (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidBillState(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Billing: Enter a State Code")
                bResult = False
            End If
        Catch ex As Exception
            addError("Billing: (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidBillZip(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Dim dTest As Int32
        Try
            If s <> "" AndAlso Int32.TryParse(s, dTest) Then
                bResult = True
            Else
                addError("Billing: Enter a Zip")
                bResult = False
            End If
        Catch ex As Exception
            addError("Billing: (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidShipStreet(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Billing: Enter a State Code")
                bResult = False
            End If
        Catch ex As Exception
            addError("Billing: (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidShipCity(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Shipping: Enter a City")
                bResult = False
            End If
        Catch ex As Exception
            addError("Shipping: (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidShipState(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Shipping: Enter a State")
                bResult = False
            End If
        Catch ex As Exception
            addError("Shipping: (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function

    Private Function isValidShipZip(ByVal s As String) As Boolean
        Dim bResult As Boolean
        Try
            If s <> "" Then
                bResult = True
            Else
                addError("Shipping: Enter a Zip")
                bResult = False
            End If
        Catch ex As Exception
            addError("Shipping: (" & ex.Message & ")")
            bResult = False
        End Try

        Return bResult
    End Function
End Class
